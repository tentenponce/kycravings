plugins {
    id "com.android.application"
    id "kotlin-android"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

apply from: "$rootDir/common.gradle"

def dartDefines = getDartDefines()
// get app id suffix
def appIdSuffix = dartDefines.appIdSuffix != 'appIdSuffix' ? dartDefines.appIdSuffix : ''

// create google services json file
if (dartDefines.androidGoogleServicesJson?.trim()) {
    println 'creating google services json'
    def encoded = dartDefines.androidGoogleServicesJson
    def decoded = new String(encoded.decodeBase64())
    def googleServicesJsonFile = new File("app/google-services.json")
    googleServicesJsonFile.write(decoded)
}

// create keystore properties
if (dartDefines.androidKeystoreProperties?.trim()) {
    println 'creating keystore properties'
    def encoded = dartDefines.androidKeystoreProperties
    def decoded = new String(encoded.decodeBase64())
    def androidKeystorePropertiesFile = new File("app/kycravings.keystore.properties")
    androidKeystorePropertiesFile.write(decoded)
}

// define keystore
def keystoreProperties = new Properties()
def keyStorePropertiesFileName = 'kycravings.keystore.properties'
def keystorePropertiesFile = file(keyStorePropertiesFileName)
def keystoreFileExists = false

if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
     def keystoreFile = file(keystoreProperties['storeFile'])
     keystoreFileExists = keystoreFile.exists()
     if (keystoreFileExists) {
        println 'Signing with provided keystore'
     } else {
        println 'Could not find signing keystore'
     }
} else {
    println 'Could not find signing keystore properties'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.kycravings"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = dartDefines.appId
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName

        if (appIdSuffix?.trim()) {
            applicationIdSuffix = appIdSuffix
        }

        ndk {
        // Filter for architectures supported by Flutter. https://docs.flutter.dev/add-to-app/android/project-setup
        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
        }
    }

    signingConfigs {
        if (keystoreFileExists) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }

    buildTypes {
        release {
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig keystoreFileExists ? signingConfigs.release : signingConfigs.debug
            // adding these filters when creating build to prevent the creation of x86 builds.
            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            }
        }
    }
}

flutter {
    source = "../.."
}
